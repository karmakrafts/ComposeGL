/*
 * Copyright 2025 (C) Karma Krafts & associates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dev.karmakrafts.composegl

interface GLES11 {
    val GL_DEPTH_BUFFER_BIT: Int
    val GL_STENCIL_BUFFER_BIT: Int
    val GL_COLOR_BUFFER_BIT: Int
    val GL_FALSE: Int
    val GL_TRUE: Int
    val GL_POINTS: Int
    val GL_LINES: Int
    val GL_LINE_LOOP: Int
    val GL_LINE_STRIP: Int
    val GL_TRIANGLES: Int
    val GL_TRIANGLE_STRIP: Int
    val GL_TRIANGLE_FAN: Int
    val GL_NEVER: Int
    val GL_LESS: Int
    val GL_EQUAL: Int
    val GL_LEQUAL: Int
    val GL_GREATER: Int
    val GL_NOTEQUAL: Int
    val GL_GEQUAL: Int
    val GL_ALWAYS: Int
    val GL_ZERO: Int
    val GL_ONE: Int
    val GL_SRC_COLOR: Int
    val GL_ONE_MINUS_SRC_COLOR: Int
    val GL_SRC_ALPHA: Int
    val GL_ONE_MINUS_SRC_ALPHA: Int
    val GL_DST_ALPHA: Int
    val GL_ONE_MINUS_DST_ALPHA: Int
    val GL_DST_COLOR: Int
    val GL_ONE_MINUS_DST_COLOR: Int
    val GL_SRC_ALPHA_SATURATE: Int
    val GL_CLIP_PLANE0: Int
    val GL_CLIP_PLANE1: Int
    val GL_CLIP_PLANE2: Int
    val GL_CLIP_PLANE3: Int
    val GL_CLIP_PLANE4: Int
    val GL_CLIP_PLANE5: Int
    val GL_FRONT: Int
    val GL_BACK: Int
    val GL_FRONT_AND_BACK: Int
    val GL_FOG: Int
    val GL_LIGHTING: Int
    val GL_TEXTURE_2D: Int
    val GL_CULL_FACE: Int
    val GL_ALPHA_TEST: Int
    val GL_BLEND: Int
    val GL_COLOR_LOGIC_OP: Int
    val GL_DITHER: Int
    val GL_STENCIL_TEST: Int
    val GL_DEPTH_TEST: Int
    val GL_POINT_SMOOTH: Int
    val GL_LINE_SMOOTH: Int
    val GL_SCISSOR_TEST: Int
    val GL_COLOR_MATERIAL: Int
    val GL_NORMALIZE: Int
    val GL_RESCALE_NORMAL: Int
    val GL_VERTEX_ARRAY: Int
    val GL_NORMAL_ARRAY: Int
    val GL_COLOR_ARRAY: Int
    val GL_TEXTURE_COORD_ARRAY: Int
    val GL_MULTISAMPLE: Int
    val GL_SAMPLE_ALPHA_TO_COVERAGE: Int
    val GL_SAMPLE_ALPHA_TO_ONE: Int
    val GL_SAMPLE_COVERAGE: Int
    val GL_NO_ERROR: Int
    val GL_INVALID_ENUM: Int
    val GL_INVALID_VALUE: Int
    val GL_INVALID_OPERATION: Int
    val GL_STACK_OVERFLOW: Int
    val GL_STACK_UNDERFLOW: Int
    val GL_OUT_OF_MEMORY: Int
    val GL_EXP: Int
    val GL_EXP2: Int
    val GL_FOG_DENSITY: Int
    val GL_FOG_START: Int
    val GL_FOG_END: Int
    val GL_FOG_MODE: Int
    val GL_FOG_COLOR: Int
    val GL_CW: Int
    val GL_CCW: Int
    val GL_CURRENT_COLOR: Int
    val GL_CURRENT_NORMAL: Int
    val GL_CURRENT_TEXTURE_COORDS: Int
    val GL_POINT_SIZE: Int
    val GL_POINT_SIZE_MIN: Int
    val GL_POINT_SIZE_MAX: Int
    val GL_POINT_FADE_THRESHOLD_SIZE: Int
    val GL_POINT_DISTANCE_ATTENUATION: Int
    val GL_SMOOTH_POINT_SIZE_RANGE: Int
    val GL_LINE_WIDTH: Int
    val GL_SMOOTH_LINE_WIDTH_RANGE: Int
    val GL_ALIASED_POINT_SIZE_RANGE: Int
    val GL_ALIASED_LINE_WIDTH_RANGE: Int
    val GL_CULL_FACE_MODE: Int
    val GL_FRONT_FACE: Int
    val GL_SHADE_MODEL: Int
    val GL_DEPTH_RANGE: Int
    val GL_DEPTH_WRITEMASK: Int
    val GL_DEPTH_CLEAR_VALUE: Int
    val GL_DEPTH_FUNC: Int
    val GL_STENCIL_CLEAR_VALUE: Int
    val GL_STENCIL_FUNC: Int
    val GL_STENCIL_VALUE_MASK: Int
    val GL_STENCIL_FAIL: Int
    val GL_STENCIL_PASS_DEPTH_FAIL: Int
    val GL_STENCIL_PASS_DEPTH_PASS: Int
    val GL_STENCIL_REF: Int
    val GL_STENCIL_WRITEMASK: Int
    val GL_MATRIX_MODE: Int
    val GL_VIEWPORT: Int
    val GL_MODELVIEW_STACK_DEPTH: Int
    val GL_PROJECTION_STACK_DEPTH: Int
    val GL_TEXTURE_STACK_DEPTH: Int
    val GL_MODELVIEW_MATRIX: Int
    val GL_PROJECTION_MATRIX: Int
    val GL_TEXTURE_MATRIX: Int
    val GL_ALPHA_TEST_FUNC: Int
    val GL_ALPHA_TEST_REF: Int
    val GL_BLEND_DST: Int
    val GL_BLEND_SRC: Int
    val GL_LOGIC_OP_MODE: Int
    val GL_SCISSOR_BOX: Int
    val GL_COLOR_CLEAR_VALUE: Int
    val GL_COLOR_WRITEMASK: Int
    val GL_MAX_LIGHTS: Int
    val GL_MAX_CLIP_PLANES: Int
    val GL_MAX_TEXTURE_SIZE: Int
    val GL_MAX_MODELVIEW_STACK_DEPTH: Int
    val GL_MAX_PROJECTION_STACK_DEPTH: Int
    val GL_MAX_TEXTURE_STACK_DEPTH: Int
    val GL_MAX_VIEWPORT_DIMS: Int
    val GL_MAX_TEXTURE_UNITS: Int
    val GL_SUBPIXEL_BITS: Int
    val GL_RED_BITS: Int
    val GL_GREEN_BITS: Int
    val GL_BLUE_BITS: Int
    val GL_ALPHA_BITS: Int
    val GL_DEPTH_BITS: Int
    val GL_STENCIL_BITS: Int
    val GL_POLYGON_OFFSET_UNITS: Int
    val GL_POLYGON_OFFSET_FILL: Int
    val GL_POLYGON_OFFSET_FACTOR: Int
    val GL_TEXTURE_BINDING_2D: Int
    val GL_VERTEX_ARRAY_SIZE: Int
    val GL_VERTEX_ARRAY_TYPE: Int
    val GL_VERTEX_ARRAY_STRIDE: Int
    val GL_NORMAL_ARRAY_TYPE: Int
    val GL_NORMAL_ARRAY_STRIDE: Int
    val GL_COLOR_ARRAY_SIZE: Int
    val GL_COLOR_ARRAY_TYPE: Int
    val GL_COLOR_ARRAY_STRIDE: Int
    val GL_TEXTURE_COORD_ARRAY_SIZE: Int
    val GL_TEXTURE_COORD_ARRAY_TYPE: Int
    val GL_TEXTURE_COORD_ARRAY_STRIDE: Int
    val GL_VERTEX_ARRAY_POINTER: Int
    val GL_NORMAL_ARRAY_POINTER: Int
    val GL_COLOR_ARRAY_POINTER: Int
    val GL_TEXTURE_COORD_ARRAY_POINTER: Int
    val GL_SAMPLE_BUFFERS: Int
    val GL_SAMPLES: Int
    val GL_SAMPLE_COVERAGE_VALUE: Int
    val GL_SAMPLE_COVERAGE_INVERT: Int
    val GL_NUM_COMPRESSED_TEXTURE_FORMATS: Int
    val GL_COMPRESSED_TEXTURE_FORMATS: Int
    val GL_DONT_CARE: Int
    val GL_FASTEST: Int
    val GL_NICEST: Int
    val GL_PERSPECTIVE_CORRECTION_HINT: Int
    val GL_POINT_SMOOTH_HINT: Int
    val GL_LINE_SMOOTH_HINT: Int
    val GL_FOG_HINT: Int
    val GL_GENERATE_MIPMAP_HINT: Int
    val GL_LIGHT_MODEL_AMBIENT: Int
    val GL_LIGHT_MODEL_TWO_SIDE: Int
    val GL_AMBIENT: Int
    val GL_DIFFUSE: Int
    val GL_SPECULAR: Int
    val GL_POSITION: Int
    val GL_SPOT_DIRECTION: Int
    val GL_SPOT_EXPONENT: Int
    val GL_SPOT_CUTOFF: Int
    val GL_CONSTANT_ATTENUATION: Int
    val GL_LINEAR_ATTENUATION: Int
    val GL_QUADRATIC_ATTENUATION: Int
    val GL_BYTE: Int
    val GL_UNSIGNED_BYTE: Int
    val GL_SHORT: Int
    val GL_UNSIGNED_SHORT: Int
    val GL_FLOAT: Int
    val GL_FIXED: Int
    val GL_CLEAR: Int
    val GL_AND: Int
    val GL_AND_REVERSE: Int
    val GL_COPY: Int
    val GL_AND_INVERTED: Int
    val GL_NOOP: Int
    val GL_XOR: Int
    val GL_OR: Int
    val GL_NOR: Int
    val GL_EQUIV: Int
    val GL_INVERT: Int
    val GL_OR_REVERSE: Int
    val GL_COPY_INVERTED: Int
    val GL_OR_INVERTED: Int
    val GL_NAND: Int
    val GL_SET: Int
    val GL_EMISSION: Int
    val GL_SHININESS: Int
    val GL_AMBIENT_AND_DIFFUSE: Int
    val GL_MODELVIEW: Int
    val GL_PROJECTION: Int
    val GL_TEXTURE: Int
    val GL_ALPHA: Int
    val GL_RGB: Int
    val GL_RGBA: Int
    val GL_LUMINANCE: Int
    val GL_LUMINANCE_ALPHA: Int
    val GL_UNPACK_ALIGNMENT: Int
    val GL_PACK_ALIGNMENT: Int
    val GL_UNSIGNED_SHORT_4_4_4_4: Int
    val GL_UNSIGNED_SHORT_5_5_5_1: Int
    val GL_UNSIGNED_SHORT_5_6_5: Int
    val GL_FLAT: Int
    val GL_SMOOTH: Int
    val GL_KEEP: Int
    val GL_REPLACE: Int
    val GL_INCR: Int
    val GL_DECR: Int
    val GL_VENDOR: Int
    val GL_RENDERER: Int
    val GL_VERSION: Int
    val GL_EXTENSIONS: Int
    val GL_MODULATE: Int
    val GL_DECAL: Int
    val GL_ADD: Int
    val GL_TEXTURE_ENV_MODE: Int
    val GL_TEXTURE_ENV_COLOR: Int
    val GL_TEXTURE_ENV: Int
    val GL_NEAREST: Int
    val GL_LINEAR: Int
    val GL_NEAREST_MIPMAP_NEAREST: Int
    val GL_LINEAR_MIPMAP_NEAREST: Int
    val GL_NEAREST_MIPMAP_LINEAR: Int
    val GL_LINEAR_MIPMAP_LINEAR: Int
    val GL_TEXTURE_MAG_FILTER: Int
    val GL_TEXTURE_MIN_FILTER: Int
    val GL_TEXTURE_WRAP_S: Int
    val GL_TEXTURE_WRAP_T: Int
    val GL_GENERATE_MIPMAP: Int
    val GL_TEXTURE0: Int
    val GL_TEXTURE1: Int
    val GL_TEXTURE2: Int
    val GL_TEXTURE3: Int
    val GL_TEXTURE4: Int
    val GL_TEXTURE5: Int
    val GL_TEXTURE6: Int
    val GL_TEXTURE7: Int
    val GL_TEXTURE8: Int
    val GL_TEXTURE9: Int
    val GL_TEXTURE10: Int
    val GL_TEXTURE11: Int
    val GL_TEXTURE12: Int
    val GL_TEXTURE13: Int
    val GL_TEXTURE14: Int
    val GL_TEXTURE15: Int
    val GL_TEXTURE16: Int
    val GL_TEXTURE17: Int
    val GL_TEXTURE18: Int
    val GL_TEXTURE19: Int
    val GL_TEXTURE20: Int
    val GL_TEXTURE21: Int
    val GL_TEXTURE22: Int
    val GL_TEXTURE23: Int
    val GL_TEXTURE24: Int
    val GL_TEXTURE25: Int
    val GL_TEXTURE26: Int
    val GL_TEXTURE27: Int
    val GL_TEXTURE28: Int
    val GL_TEXTURE29: Int
    val GL_TEXTURE30: Int
    val GL_TEXTURE31: Int
    val GL_ACTIVE_TEXTURE: Int
    val GL_CLIENT_ACTIVE_TEXTURE: Int
    val GL_REPEAT: Int
    val GL_CLAMP_TO_EDGE: Int
    val GL_LIGHT0: Int
    val GL_LIGHT1: Int
    val GL_LIGHT2: Int
    val GL_LIGHT3: Int
    val GL_LIGHT4: Int
    val GL_LIGHT5: Int
    val GL_LIGHT6: Int
    val GL_LIGHT7: Int
    val GL_ARRAY_BUFFER: Int
    val GL_ELEMENT_ARRAY_BUFFER: Int
    val GL_ARRAY_BUFFER_BINDING: Int
    val GL_ELEMENT_ARRAY_BUFFER_BINDING: Int
    val GL_VERTEX_ARRAY_BUFFER_BINDING: Int
    val GL_NORMAL_ARRAY_BUFFER_BINDING: Int
    val GL_COLOR_ARRAY_BUFFER_BINDING: Int
    val GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING: Int
    val GL_STATIC_DRAW: Int
    val GL_DYNAMIC_DRAW: Int
    val GL_BUFFER_SIZE: Int
    val GL_BUFFER_USAGE: Int
    val GL_SUBTRACT: Int
    val GL_COMBINE: Int
    val GL_COMBINE_RGB: Int
    val GL_COMBINE_ALPHA: Int
    val GL_RGB_SCALE: Int
    val GL_ADD_SIGNED: Int
    val GL_INTERPOLATE: Int
    val GL_CONSTANT: Int
    val GL_PRIMARY_COLOR: Int
    val GL_PREVIOUS: Int
    val GL_OPERAND0_RGB: Int
    val GL_OPERAND1_RGB: Int
    val GL_OPERAND2_RGB: Int
    val GL_OPERAND0_ALPHA: Int
    val GL_OPERAND1_ALPHA: Int
    val GL_OPERAND2_ALPHA: Int
    val GL_ALPHA_SCALE: Int
    val GL_SRC0_RGB: Int
    val GL_SRC1_RGB: Int
    val GL_SRC2_RGB: Int
    val GL_SRC0_ALPHA: Int
    val GL_SRC1_ALPHA: Int
    val GL_SRC2_ALPHA: Int
    val GL_DOT3_RGB: Int
    val GL_DOT3_RGBA: Int
}
